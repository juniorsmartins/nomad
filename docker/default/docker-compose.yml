name: nomad

services:

  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    networks:
      - general_communication
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data

  redpanda-console:
    container_name: redpanda
#    image: docker.redpanda.com/vectorized/console:latest
    image: airbyte/destination-redpanda:latest
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    ports:
      - "8081:8080"
    networks:
      - general_communication
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:29092"]
    depends_on:
      - "kafka"

  accounting_analysis:
    container_name: accounting_analysis
    image: juniorsmartins/accounting_analysis:v0.0.1
    build:
      context: ../../accounting_analysis/
      dockerfile: Dockerfile
      args:
        APP_NAME: "accounting_analysis"
        APP_VERSION: "v0.0.1"
        APP_DESCRIPTION: "Desenvolve análises de dados a partir do livro-caixa."
    ports:
      - "9202:9202"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: always
    networks:
      - general_communication
    depends_on:
      - accounting

  accounting:
    container_name: accounting
    image: juniorsmartins/accounting:v0.0.1
    build:
      context: ../../accounting/
      dockerfile: Dockerfile
      args:
        APP_NAME: "accounting"
        APP_VERSION: "v0.0.1"
        APP_DESCRIPTION: "Gerencia livro-caixa e registros financeiros de entrada e saída."
    ports:
      - "9201:9201"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: always
    networks:
      - general_communication
      - accounting_database_communication
    environment:
      DB_HOST: accounting_database
      DB_PORT: 5432
      DB_NAME: accounting
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
    depends_on:
      - accounting_database

  accounting_database:
    container_name: accounting_database
    ports:
      - "5501:5432"
    restart: always
    networks:
      - accounting_database_communication
    environment:
      - POSTGRES_DB=accounting
    extends:
      file: common-config.yml
      service: accounting_database_config
    volumes:
      - accounting_database_data:/var/lib/postgresql/data


  # --------------------------------------------------------------------
  # --------------------------- MONITORAMENTO E OBSERVABILIDADE
  # --------------------------------------------------------------------
  read:
    container_name: read
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 30s
      timeout: 30s
      retries: 5
    networks: &loki-dns
      general_communication:
        aliases:
          - loki

  write:
    container_name: write
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 30s
      timeout: 30s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    container_name: alloy
    image: grafana/alloy:v1.0.0
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - general_communication

  minio:
    container_name: minio
    image: minio/minio:RELEASE.2024-05-27T19-17-46Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 20s
      timeout: 20s
      retries: 5
    networks:
      - general_communication

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - general_communication

  gateway:
    container_name: gateway
    image: nginx:1.25.5
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1
        
        events {
          worker_connections   1000;
        }
        
        http {
          resolver 127.0.0.11;
        
          server {
            listen             3100;
        
            location = / {
              return 200 'OK';
              auth_basic off;
            }
        
            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
        
            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - general_communication

  backend:
    container_name: backend
    image: grafana/loki:3.0.0
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - general_communication

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.51.0
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always
    networks:
      - general_communication


# --------------------------------------------------------------------
# --------------------------- VOLUMES
# --------------------------------------------------------------------
volumes:
  accounting_database_data:
    name: accounting_database_data


# --------------------------------------------------------------------
# --------------------------- NETWORKS
# --------------------------------------------------------------------
networks:
  general_communication:
    name: general_communication
    driver: bridge

  accounting_database_communication:
    name: accounting_database_communication
    driver: bridge



